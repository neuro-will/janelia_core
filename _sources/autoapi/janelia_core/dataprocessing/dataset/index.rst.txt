:py:mod:`janelia_core.dataprocessing.dataset`
=============================================

.. py:module:: janelia_core.dataprocessing.dataset

.. autoapi-nested-parse::

   Tools for representing and working with time series datasets.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   janelia_core.dataprocessing.dataset.DataSet
   janelia_core.dataprocessing.dataset.ROIDataset
   janelia_core.dataprocessing.dataset.PointDataset




.. py:class:: DataSet(ts_data: dict = None, metadata: dict = None, **kwargs)

   A class for holding a basic data set.



   Creates a new DataSet object.

   Args:
       ts_data: A dictionary of time series data.  Each entry in the dictionary is one set of data (with a user
       specified key).  Each set of data is itself stored in a dictionary with two entries.  The first with
       the key 'ts' is a 1-d numpy.ndarray with timestamps.  The second 'vls' can be:
           1) A list, with one entry per time point
           2) A numpy array of data, with the first dimension corresponding to time
           3) A janelia_core.fileio.data_handlers.NDArrayHandler object

       If data is none the data attribute of the created object will be an empty dictionary.

       metadata: A dictionary of metadata. If meta_data is None, the meta_data attribute of the created object will be
       a empty dictionary.

       **kwargs: Additional keyword arguments that will be added as attributes of the object.


   .. py:method:: from_dict(cls, d: dict)
      :classmethod:

      Creates a new Dataset object from a dictioary.

      Args:
          d: A dictionary with the keys 'ts_data' and 'metadata'

      Returns:
          A new DataSet object


   .. py:method:: to_dict(self)

      Creates a dictionary from a Dataset object.

      This is useful for saving the object in a manner which will still allow it to be loaded in the future should
      the class definition of Dataset change.

      Returns:
          d: A dictionary with the object data.


   .. py:method:: update_image_folder(dataset, img_field, new_base)
      :staticmethod:

      Updates the folder images are stored under when a dataset holds paths to a time series of images.

      When images are stored as paths in a ts_data dictionary, this function can be used to
      update the part of the path specifying the folder they are stored in.  This is useful
      when using a dataset across computers/operating systems where we need to specify that
      images are stored in different locations.

      This function expects images to be saved in dataset.ts_data[img_field]['vls'] with one
      dictionary per image.  Each dictionary should have a 'file' field with the path to each
      image.  This is the field that will be udpated.

      Args:
          dataset: The dataset to update

          img_field: The ts_data entry with the image information stored.

          new_base: The folder the images are stored in.



   .. py:method:: has_ts_data(self) -> bool

      Returns true if any time series data has non-zero data points.



   .. py:method:: select_time_range(self, start_time: float, end_time: float)

      Down selects data in a time range.

      The start and end times are inclusive.

      Args:
          start_time: The start time of the selection.

          end_time: The end time of the selection.



   .. py:method:: select_ts_data(self, key: str, sel_inds: numpy.ndarray) -> dict

      Selects data by index in a given dictionary of ts_data.

      This function will allow selection to work seamlessly no matter the
      type of 'vls' in the dictionary data is being pulled from.

      Args:
          key: The key of the ts_data to select data from.

          sel_inds: A numpy array of indices to select.

      Returns:
          A new dictionary with the selected data.



.. py:class:: ROIDataset(ts_data: dict = None, metadata: dict = None, roi_groups: dict = None, **kwargs)

   Bases: :py:obj:`DataSet`

   A dataset object for holding datasets which include roi information.


       Initializes an ROIDataset object.

       ROI data is added to the ts_data dictionary.

   Args:
       ts_data: A dictionary of time series data.  See description in Dataset.__init__()

       metadata: A dictionary of metadata.  See description in Dataset.__init__()

       roi_groups: A dictionary holding ROI groups.  A "ROI group" is a group of ROIs whose values are stored
       together in entries in ts_data.  One group can have values stored in multiple entries in ts_data. Each entry
       in roi_groups is specified by a key giving the name of the group and a value which is a dictionary with the
       keys:
           1) rois: A list of ROI objects representing the rois in the group
           2) ts_labels: A list of ts_data entries with data for this group of rois.
           3) Optional keys the user may specify. For example, a "type" can be specified.

       If an entry in ts_data holds values for an ROI group, it must hold only values for those ROIs and the order
       order of variables in ts_data 'vls' must match the order of ROIs in the rois list for the group.

       If roi_groups is none, an empty dictionary will be created.

       **kwargs: Additional keyword arguments that will be added as attributes of the object.


   .. py:method:: from_dict(cls, d: dict)
      :classmethod:

      Creates a new ROIDataset object from a dictionary.

      Args:
          d: A dictionary with the keys 'ts_data', 'metadata', 'roi_groups' and other attributes to add to the object

      Returns:
          A new ROIDataset object


   .. py:method:: to_dict(self) -> dict

      Creates a dictionary from a Dataset object.

      This is useful for saving the object in a manner which will still allow it to be loaded in the future should
      the class definition of Dataset change.

      Returns:
          d: A dictionary with the object data.


   .. py:method:: down_select_rois(self, roi_groups: list, roi_inds)

      Down select the rois in a dataset.

      ROIs will be removed from dataset.rois and any data for the removed ROIS will
      also be removed from the appropriate ts_data entries.

      Args:
          roi_groups: The roi groups of the rois to extract.  Typically, this will only be a single
          group. However, sometimes the same rois might be represented twice in the dataset (e.g., rois
          before and after registration), and we want to remove both representations.

          roi_inds: The indices in dataset.roi_groups[roi_group].rois to keep.


   .. py:method:: extract_rois(self, roi_group, roi_inds, labels)

      Extracts rois from a dataset.

      Args:
          roi_group: The roi group of the rois to extract

          roi_inds: The indices of the dataset.rois to extract

          labels: A list of labels of ts_data for the rois to pull out.

      Returns:
          rois: A list of the extracted rois.  Each entry as an ROI object.
          These objects will have fields added holding the ts_data for that ROI.


   .. py:method:: form_composite_rois(self, roi_groups: list, roi_weights: list) -> janelia_core.dataprocessing.roi.ROI

      Forms composite rois as linear combinations of rois in a dataset.

      Args:
          roi_groups: A list of roi groups to use in forming the composite roi.

          roi_weights: a list of weights.  roi_weights[i] is a np.ndarray of weights for
          the rois in roi_groups[i].  Weights should be listed in the same order as rois in the group
          they are for.

      Returns:
          comp_roi: The composite roi



   .. py:method:: get_rois_center_of_mass(self, roi_group: str, roi_inds) -> numpy.ndarray

      Gets the center of mass of requested rois.

      Args:
          roi_group: The roi group to calculate centers for

          roi_inds: The indices in dataset.roi_groups[roi_group].rois of the rois to calculate
          centers for.

      Returns:
          ctrs: The centers.  ctrs[i,:] is the center for the roi specified by roi_inds[i] in the input.



.. py:class:: PointDataset(ts_data: dict = None, metadata: dict = None, point_groups: dict = None, **kwargs)

   Bases: :py:obj:`DataSet`

   A dataset object for holding datasets with timeseries information associated with points in space.


       Initializes a PointDataset object.

   Args:
       ts_data: A dictionary of time series data.  See description in Dataset.__init__()

       metadata: A dictionary of metadata.  See description in Dataset.__init__()

       point_groups: A dictionary holding point groups.  A "point group" is a group of points whose values
       are stored together in entries in ts_data.  One group can have values stored in multiple entries in
       ts_data.  Each entry in point_groups is specified by a key giving the name of the group and a value which
       is a dictionary with the keys:
           1) points: A list of Point objects representing the points in the group
           2) ts_labels: A list of ts_data entries with data for this group of points.
           3) Optional keys the user may specify. For example, a "type" can be specified.

       If an entry in ts_data holds values for a point group, it must hold only values for those points and the
       order of variables in the ts_data 'vls' entry must match the order of points in the points list for the
       group.

       If point_groups is none, an empty dictionary will be created.

       **kwards: Additional keyword arguments will be added as attributes of the object.
   |

   .. py:method:: to_dict(self) -> dict

      Create a dictionary from a Dataset object.

      This is useful for saving the object in a manner which will still allow for it to be loaded in the
      future should the class definition change.

      Returns:
          d: A dictionary with the object data.


   .. py:method:: from_dict(cls, d: dict)
      :classmethod:

      Creates a new PointDataset object from a dictionary.

      Args:
          d: A dictionary with the keys 'ts_data', 'metadata', 'roi_groups' and other attributes to add to the object

      Returns:
          A new PointDataset object




