:py:mod:`janelia_core.dataprocessing.point`
===========================================

.. py:module:: janelia_core.dataprocessing.point

.. autoapi-nested-parse::

   Module for working with point representation of spatial variables, such as cells.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   janelia_core.dataprocessing.point.Point




.. py:class:: Point(c: numpy.ndarray, cs_names: list = None, **kwargs)

   
   Creates a new point object.

   Args:
       c: Of shape n_coord_systems*n_dims.  Each row gives the location of a point in a given coordinate
       system. For many applications, points may be specified in a single coordinate system in which case c
       would have only one row.

       cs_names: An optional list of names to associate with each coordinate system. If not none, the length of
       cs_names must equal the number of coordinate systems used to specify the position of the point.

       **kwargs: Additional keyword arguments that will be added as attributes of the object.

   Raises:
       ValueError: If the length of cs_names does not equal the number of coordinate systems in c.

   .. py:method:: from_dict(cls, d: dict)
      :classmethod:

      Create a new point object from a dictionary.

      Args:
          d: A dictionary with the keys 'c' and 'cs_names'

      Returns:
          A new Point object


   .. py:method:: to_dict(self)

      Create a dictionary from a Point object.

      This is useful for saving the object in a manner which will still allow to be loaded in the
      future in case the class definition of Point changes.

      Returns:
          d: A dictionary with object data.



