:py:mod:`janelia_core.dataprocessing.roi`
=========================================

.. py:module:: janelia_core.dataprocessing.roi

.. autoapi-nested-parse::

   Module for working with and representing regions of interest (ROIS) in imaging data.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   janelia_core.dataprocessing.roi.ROI




.. py:class:: ROI(voxel_inds: list, weights: numpy.ndarray)

   
   Initializes an ROI object.

   Args:
       voxel_inds: This is a tuple of length n_dims.  Each entry contains either (1) the indices of each voxel
       for that dimension or (2) a slice denoting the sides of a hyper rectangle which defines the
       ROI.  In both cases, dimensions are listed in the same order as the image the ROI is for.

       weights: A numpy array of weights for each voxel.  If all voxels have the same weight, this can be a scalar.


   .. py:method:: from_dict(d: dict)
      :classmethod:

      Creates a new ROI object from a dictionary.

      Args:
          d: A dictionary with the keys 'voxel_inds' and 'weights'  Extra keys in the dictionary will be
          added as additional attributes.

      Returns:
          A new ROI object


   .. py:method:: from_array(arr: numpy.ndarray, start_inds: numpy.ndarray = None)
      :classmethod:

      Create an ROI object from a numpy array.

      Args:
          arr: The array represnting the ROI.  Individual values are weights of voxels in the ROI.

          start_inds: If not none, gives the index in a larger image the first index of each dimension
          in arr corresponds to. When start_inds is None, this is equivelent to providing a start_inds of
          all zeros.


   .. py:method:: to_dict()

      Creates a dictionary from a ROI object.

      This is useful for saving the object in a manner which will still allow it to be loaded in the future should
      the class definition of ROI change.

      Returns:
          d: A dictionary with the object data.


   .. py:method:: n_voxels()

      Returns the number of voxels in the roi.


   .. py:method:: bounding_box() -> list

      Calculates a bounding box around the ROI.

      Returns:
          A tuple giving slices for each dimension of the bounding box.


   .. py:method:: extents() -> numpy.ndarray

      Gets the length of sides of a bounding box holding the roi.

      Returns:
          extents: A np.ndarray of side lengths for each dimension of the bounding box


   .. py:method:: center_of_mass() -> numpy.ndarray

      Returns the center of mass of the roi.


   .. py:method:: list_all_voxel_inds() -> list

      Exhaustively lists all voxel coordinates in the roi.

      Returns:
          dim_coords - A tuple listing all voxel indices.


   .. py:method:: list_all_weights() -> numpy.ndarray

      Returns weights of each voxel in the roi.

      This function returns an array of weights, even if the weights attribute
      of the ROI object is a scalar (indicating all weights are the same)

      Returns:
          weights: The weights of each voxel in the roi.




   .. py:method:: slice_roi(plane_idx: int, dim: int = 0, retain_dim=True)

      Returns a slice of an ROI.

      Args:
          plane_idx: The index of the plane to slice

          dim: The dimension which defines the plane.

          retain_dim: If true, the voxel_inds of the returned roi will be the same length
          as the original roi.  If false, the entry in voxel_inds for the dimension that was
          sliced along will be removed.

      Returns:
          new_roi: A new roi formed from slicing the roi this function was called on.


   .. py:method:: intersect_plane(plane_idx: int, dim: int = None)

      Tests if an ROI intersects a plane.

      Args:
          plane_idx: The index of the plane

          dim: The dimension which defines the plane.  If this is None, dim will be set to 0.

      Returns:
          intersects: True if roi intersects the plane; false if otherwise



